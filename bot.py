import logging
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_data = {}  # {chat_id: {stats}}
top_scores = {}  # {chat_id: {name, score}}
shop_items = {
    1: {"name": "–£—Ç—è–∂–µ–ª–∏—Ç–µ–ª–∏", "price": 100, "effect": {"xp_boost": 1.2}},
    2: {"name": "–ó–æ–ª–æ—Ç–æ–π –º—è—á", "price": 300, "effect": {"chance_boost": 10}}
}
weather_conditions = ['sunny', 'rain', 'windy']

# ========================
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
# ========================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"üèÄ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç!\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/shop - –ú–∞–≥–∞–∑–∏–Ω\n"
        "/leaderboard - –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤"
    )

async def play(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
    keyboard = [
        [InlineKeyboardButton("üèÄ –õ–µ–≥–∫–∏–π", callback_data='easy'),
         InlineKeyboardButton("üî• –°—Ä–µ–¥–Ω–∏–π", callback_data='medium')],
        [InlineKeyboardButton("üíÄ –°–ª–æ–∂–Ω—ã–π", callback_data='hard'),
         InlineKeyboardButton("üåü –ó–≤–µ–∑–¥–Ω—ã–π –º–∞—Ç—á", callback_data='star')]
    ]
    await update.message.reply_text(
        "üéÆ –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ========================
# –ò–≥—Ä–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞
# ========================

def generate_throw_animation(success: bool) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –±—Ä–æ—Å–∫–∞"""
    frames = [
        "     ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n     ‚îÇ       ‚îÇ\n üèÄ ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\n     ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
        "     ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n üèÄ ‚îÇ       ‚îÇ\n   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\n     ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
        "     ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n     ‚îÇ   üéØ  ‚îÇ\n   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\n     ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ" if success 
        else "     ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n     ‚îÇ   üå™Ô∏è  ‚îÇ\n   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\n     ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
    ]
    return "\n".join(frames)

def calculate_chance(game_data: dict) -> int:
    """–†–∞—Å—á–µ—Ç —à–∞–Ω—Å–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è"""
    base_chance = {
        'easy': 70, 'medium': 50, 'hard': 30, 'star': 40
    }[game_data['mode']]
    
    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    chance = base_chance
    chance += game_data['skills']['accuracy'] * 2
    chance += game_data['weather']['effect']
    chance += game_data.get('bonus_chance', 0)
    
    return max(10, min(90, chance))

# ========================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
# ========================

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
    if query.data in ['easy', 'medium', 'hard', 'star']:
        user_data[chat_id] = {
            'score': 0,
            'attempts': 0,
            'mode': query.data,
            'skills': {'accuracy': 1},
            'weather': get_current_weather(),
            'combo': 0,
            'bonuses': {}
        }
        await start_game_session(chat_id, context.bot)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞
    elif query.data == 'throw':
        await process_throw(chat_id, context.bot)

async def start_game_session(chat_id, bot):
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
    game_data = user_data[chat_id]
    await bot.send_message(
        chat_id,
        f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {game_data['weather']['emoji']}\n"
        f"üèÜ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã! –°–µ–π—á–∞—Å: {game_data['score']} –æ—á–∫–æ–≤",
        reply_markup=game_keyboard()
    )

def game_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üèÄ –ë—Ä–æ—Å–∏—Ç—å –º—è—á", callback_data='throw')],
        [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop'),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
    ])

# ========================
# –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
# ========================

async def process_throw(chat_id, bot):
    game_data = user_data[chat_id]
    game_data['attempts'] += 1
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
    msg = await bot.send_message(chat_id, "‚è≥ –ë—Ä–æ—Å–æ–∫...")
    for frame in generate_throw_animation(False).split("\n"):
        await bot.edit_message_text(
            f"```\n{frame}\n```",
            chat_id=chat_id,
            message_id=msg.message_id,
            parse_mode='MarkdownV2'
        )
        await asyncio.sleep(0.3)
    
    # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    success = random.randint(1, 100) <= calculate_chance(game_data)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    if success:
        game_data['score'] += 3 if game_data['mode'] == 'star' else 2
        game_data['combo'] += 1
        game_data['skills']['accuracy'] += 0.1
    else:
        game_data['combo'] = 0
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_text = (
        f"‚ú® {'–°—É–ø–µ—Ä —É–¥–∞—Ä! +3 –æ—á–∫–∞!' if game_data['mode'] == 'star' else '–ü–æ–ø–∞–¥–∞–Ω–∏–µ! +2 –æ—á–∫–∞!'}"
        if success else "‚ùå –ü—Ä–æ–º–∞—Ö!"
    )
    
    await bot.edit_message_text(
        f"{result_text}\n"
        f"üèÜ –û—á–∫–∏: {game_data['score']}\n"
        f"üéØ –ü–æ–ø—ã—Ç–æ–∫: {game_data['attempts']}/10\n"
        f"üî• –ö–æ–º–±–æ: x{game_data['combo']}",
        chat_id=chat_id,
        message_id=msg.message_id,
        reply_markup=game_keyboard()
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
    if game_data['attempts'] >= 10:
        await end_game(chat_id, bot)

# ========================
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
# ========================

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(f"{item['name']} - {item['price']} –º–æ–Ω–µ—Ç", callback_data=f"buy_{id}")]
        for id, item in shop_items.items()
    ]
    await update.message.reply_text(
        "üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤"""
    sorted_scores = sorted(top_scores.items(), key=lambda x: x[1]['score'], reverse=True)[:10]
    board = "\n".join(
        [f"{i+1}. {data['name']}: {data['score']}" for i, (_, data) in enumerate(sorted_scores)]
    )
    await update.message.reply_text(f"üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n{board}")

async def end_game(chat_id, bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
    game_data = user_data[chat_id]
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–æ–≤
    if chat_id not in top_scores or game_data['score'] > top_scores[chat_id]['score']:
        top_scores[chat_id] = {
            'name': (await bot.get_chat(chat_id)).first_name,
            'score': game_data['score']
        }
    
    await bot.send_message(
        chat_id,
        f"üéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Å—á–µ—Ç: {game_data['score']}\n"
        f"üí° –£—Ä–æ–≤–µ–Ω—å —Ç–æ—á–Ω–æ—Å—Ç–∏: {round(game_data['skills']['accuracy'], 1)}"
    )
    del user_data[chat_id]

def get_current_weather():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã"""
    weather = random.choice(weather_conditions)
    effects = {
        'sunny': {"emoji": "‚òÄÔ∏è", "effect": 0},
        'rain': {"emoji": "üåßÔ∏è", "effect": -15},
        'windy': {"emoji": "üå™Ô∏è", "effect": random.randint(-20, 5)}
    }
    return effects[weather]

# ========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ========================

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    application = Updater("7658440066:AAHL2HunIJVqwnOzj70-gCBvKKUIphvAMRU").application
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('play', play))
    application.add_handler(CommandHandler('shop', shop))
    application.add_handler(CommandHandler('leaderboard', leaderboard))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫
    application.run_polling()

if __name__ == '__main__':
    main()